// Code generated by counterfeiter. DO NOT EDIT.
package flyfakes

import (
	"sync"

	"github.com/concourse/concourse-pipeline-resource/fly"
)

type FakeCommand struct {
	DestroyPipelineStub        func(string) ([]byte, error)
	destroyPipelineMutex       sync.RWMutex
	destroyPipelineArgsForCall []struct {
		arg1 string
	}
	destroyPipelineReturns struct {
		result1 []byte
		result2 error
	}
	destroyPipelineReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ExposePipelineStub        func(string) ([]byte, error)
	exposePipelineMutex       sync.RWMutex
	exposePipelineArgsForCall []struct {
		arg1 string
	}
	exposePipelineReturns struct {
		result1 []byte
		result2 error
	}
	exposePipelineReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetPipelineStub        func(string) ([]byte, error)
	getPipelineMutex       sync.RWMutex
	getPipelineArgsForCall []struct {
		arg1 string
	}
	getPipelineReturns struct {
		result1 []byte
		result2 error
	}
	getPipelineReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	LoginStub        func(string, string, string, string, bool) ([]byte, error)
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 bool
	}
	loginReturns struct {
		result1 []byte
		result2 error
	}
	loginReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	PipelinesStub        func() ([]string, error)
	pipelinesMutex       sync.RWMutex
	pipelinesArgsForCall []struct {
	}
	pipelinesReturns struct {
		result1 []string
		result2 error
	}
	pipelinesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	SetPipelineStub        func(string, string, []string, map[string]interface{}) ([]byte, error)
	setPipelineMutex       sync.RWMutex
	setPipelineArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 map[string]interface{}
	}
	setPipelineReturns struct {
		result1 []byte
		result2 error
	}
	setPipelineReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	UnpausePipelineStub        func(string) ([]byte, error)
	unpausePipelineMutex       sync.RWMutex
	unpausePipelineArgsForCall []struct {
		arg1 string
	}
	unpausePipelineReturns struct {
		result1 []byte
		result2 error
	}
	unpausePipelineReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommand) DestroyPipeline(arg1 string) ([]byte, error) {
	fake.destroyPipelineMutex.Lock()
	ret, specificReturn := fake.destroyPipelineReturnsOnCall[len(fake.destroyPipelineArgsForCall)]
	fake.destroyPipelineArgsForCall = append(fake.destroyPipelineArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DestroyPipeline", []interface{}{arg1})
	fake.destroyPipelineMutex.Unlock()
	if fake.DestroyPipelineStub != nil {
		return fake.DestroyPipelineStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.destroyPipelineReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommand) DestroyPipelineCallCount() int {
	fake.destroyPipelineMutex.RLock()
	defer fake.destroyPipelineMutex.RUnlock()
	return len(fake.destroyPipelineArgsForCall)
}

func (fake *FakeCommand) DestroyPipelineCalls(stub func(string) ([]byte, error)) {
	fake.destroyPipelineMutex.Lock()
	defer fake.destroyPipelineMutex.Unlock()
	fake.DestroyPipelineStub = stub
}

func (fake *FakeCommand) DestroyPipelineArgsForCall(i int) string {
	fake.destroyPipelineMutex.RLock()
	defer fake.destroyPipelineMutex.RUnlock()
	argsForCall := fake.destroyPipelineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCommand) DestroyPipelineReturns(result1 []byte, result2 error) {
	fake.destroyPipelineMutex.Lock()
	defer fake.destroyPipelineMutex.Unlock()
	fake.DestroyPipelineStub = nil
	fake.destroyPipelineReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) DestroyPipelineReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.destroyPipelineMutex.Lock()
	defer fake.destroyPipelineMutex.Unlock()
	fake.DestroyPipelineStub = nil
	if fake.destroyPipelineReturnsOnCall == nil {
		fake.destroyPipelineReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.destroyPipelineReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) ExposePipeline(arg1 string) ([]byte, error) {
	fake.exposePipelineMutex.Lock()
	ret, specificReturn := fake.exposePipelineReturnsOnCall[len(fake.exposePipelineArgsForCall)]
	fake.exposePipelineArgsForCall = append(fake.exposePipelineArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ExposePipeline", []interface{}{arg1})
	fake.exposePipelineMutex.Unlock()
	if fake.ExposePipelineStub != nil {
		return fake.ExposePipelineStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exposePipelineReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommand) ExposePipelineCallCount() int {
	fake.exposePipelineMutex.RLock()
	defer fake.exposePipelineMutex.RUnlock()
	return len(fake.exposePipelineArgsForCall)
}

func (fake *FakeCommand) ExposePipelineCalls(stub func(string) ([]byte, error)) {
	fake.exposePipelineMutex.Lock()
	defer fake.exposePipelineMutex.Unlock()
	fake.ExposePipelineStub = stub
}

func (fake *FakeCommand) ExposePipelineArgsForCall(i int) string {
	fake.exposePipelineMutex.RLock()
	defer fake.exposePipelineMutex.RUnlock()
	argsForCall := fake.exposePipelineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCommand) ExposePipelineReturns(result1 []byte, result2 error) {
	fake.exposePipelineMutex.Lock()
	defer fake.exposePipelineMutex.Unlock()
	fake.ExposePipelineStub = nil
	fake.exposePipelineReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) ExposePipelineReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.exposePipelineMutex.Lock()
	defer fake.exposePipelineMutex.Unlock()
	fake.ExposePipelineStub = nil
	if fake.exposePipelineReturnsOnCall == nil {
		fake.exposePipelineReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.exposePipelineReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) GetPipeline(arg1 string) ([]byte, error) {
	fake.getPipelineMutex.Lock()
	ret, specificReturn := fake.getPipelineReturnsOnCall[len(fake.getPipelineArgsForCall)]
	fake.getPipelineArgsForCall = append(fake.getPipelineArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetPipeline", []interface{}{arg1})
	fake.getPipelineMutex.Unlock()
	if fake.GetPipelineStub != nil {
		return fake.GetPipelineStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPipelineReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommand) GetPipelineCallCount() int {
	fake.getPipelineMutex.RLock()
	defer fake.getPipelineMutex.RUnlock()
	return len(fake.getPipelineArgsForCall)
}

func (fake *FakeCommand) GetPipelineCalls(stub func(string) ([]byte, error)) {
	fake.getPipelineMutex.Lock()
	defer fake.getPipelineMutex.Unlock()
	fake.GetPipelineStub = stub
}

func (fake *FakeCommand) GetPipelineArgsForCall(i int) string {
	fake.getPipelineMutex.RLock()
	defer fake.getPipelineMutex.RUnlock()
	argsForCall := fake.getPipelineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCommand) GetPipelineReturns(result1 []byte, result2 error) {
	fake.getPipelineMutex.Lock()
	defer fake.getPipelineMutex.Unlock()
	fake.GetPipelineStub = nil
	fake.getPipelineReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) GetPipelineReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getPipelineMutex.Lock()
	defer fake.getPipelineMutex.Unlock()
	fake.GetPipelineStub = nil
	if fake.getPipelineReturnsOnCall == nil {
		fake.getPipelineReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getPipelineReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) Login(arg1 string, arg2 string, arg3 string, arg4 string, arg5 bool) ([]byte, error) {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 bool
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("Login", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.loginMutex.Unlock()
	if fake.LoginStub != nil {
		return fake.LoginStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.loginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommand) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeCommand) LoginCalls(stub func(string, string, string, string, bool) ([]byte, error)) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *FakeCommand) LoginArgsForCall(i int) (string, string, string, string, bool) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCommand) LoginReturns(result1 []byte, result2 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) LoginReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) Pipelines() ([]string, error) {
	fake.pipelinesMutex.Lock()
	ret, specificReturn := fake.pipelinesReturnsOnCall[len(fake.pipelinesArgsForCall)]
	fake.pipelinesArgsForCall = append(fake.pipelinesArgsForCall, struct {
	}{})
	fake.recordInvocation("Pipelines", []interface{}{})
	fake.pipelinesMutex.Unlock()
	if fake.PipelinesStub != nil {
		return fake.PipelinesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pipelinesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommand) PipelinesCallCount() int {
	fake.pipelinesMutex.RLock()
	defer fake.pipelinesMutex.RUnlock()
	return len(fake.pipelinesArgsForCall)
}

func (fake *FakeCommand) PipelinesCalls(stub func() ([]string, error)) {
	fake.pipelinesMutex.Lock()
	defer fake.pipelinesMutex.Unlock()
	fake.PipelinesStub = stub
}

func (fake *FakeCommand) PipelinesReturns(result1 []string, result2 error) {
	fake.pipelinesMutex.Lock()
	defer fake.pipelinesMutex.Unlock()
	fake.PipelinesStub = nil
	fake.pipelinesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) PipelinesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.pipelinesMutex.Lock()
	defer fake.pipelinesMutex.Unlock()
	fake.PipelinesStub = nil
	if fake.pipelinesReturnsOnCall == nil {
		fake.pipelinesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.pipelinesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) SetPipeline(arg1 string, arg2 string, arg3 []string, arg4 map[string]interface{}) ([]byte, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.setPipelineMutex.Lock()
	ret, specificReturn := fake.setPipelineReturnsOnCall[len(fake.setPipelineArgsForCall)]
	fake.setPipelineArgsForCall = append(fake.setPipelineArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 map[string]interface{}
	}{arg1, arg2, arg3Copy, arg4})
	fake.recordInvocation("SetPipeline", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.setPipelineMutex.Unlock()
	if fake.SetPipelineStub != nil {
		return fake.SetPipelineStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setPipelineReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommand) SetPipelineCallCount() int {
	fake.setPipelineMutex.RLock()
	defer fake.setPipelineMutex.RUnlock()
	return len(fake.setPipelineArgsForCall)
}

func (fake *FakeCommand) SetPipelineCalls(stub func(string, string, []string, map[string]interface{}) ([]byte, error)) {
	fake.setPipelineMutex.Lock()
	defer fake.setPipelineMutex.Unlock()
	fake.SetPipelineStub = stub
}

func (fake *FakeCommand) SetPipelineArgsForCall(i int) (string, string, []string, map[string]interface{}) {
	fake.setPipelineMutex.RLock()
	defer fake.setPipelineMutex.RUnlock()
	argsForCall := fake.setPipelineArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCommand) SetPipelineReturns(result1 []byte, result2 error) {
	fake.setPipelineMutex.Lock()
	defer fake.setPipelineMutex.Unlock()
	fake.SetPipelineStub = nil
	fake.setPipelineReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) SetPipelineReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.setPipelineMutex.Lock()
	defer fake.setPipelineMutex.Unlock()
	fake.SetPipelineStub = nil
	if fake.setPipelineReturnsOnCall == nil {
		fake.setPipelineReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.setPipelineReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) UnpausePipeline(arg1 string) ([]byte, error) {
	fake.unpausePipelineMutex.Lock()
	ret, specificReturn := fake.unpausePipelineReturnsOnCall[len(fake.unpausePipelineArgsForCall)]
	fake.unpausePipelineArgsForCall = append(fake.unpausePipelineArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UnpausePipeline", []interface{}{arg1})
	fake.unpausePipelineMutex.Unlock()
	if fake.UnpausePipelineStub != nil {
		return fake.UnpausePipelineStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unpausePipelineReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommand) UnpausePipelineCallCount() int {
	fake.unpausePipelineMutex.RLock()
	defer fake.unpausePipelineMutex.RUnlock()
	return len(fake.unpausePipelineArgsForCall)
}

func (fake *FakeCommand) UnpausePipelineCalls(stub func(string) ([]byte, error)) {
	fake.unpausePipelineMutex.Lock()
	defer fake.unpausePipelineMutex.Unlock()
	fake.UnpausePipelineStub = stub
}

func (fake *FakeCommand) UnpausePipelineArgsForCall(i int) string {
	fake.unpausePipelineMutex.RLock()
	defer fake.unpausePipelineMutex.RUnlock()
	argsForCall := fake.unpausePipelineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCommand) UnpausePipelineReturns(result1 []byte, result2 error) {
	fake.unpausePipelineMutex.Lock()
	defer fake.unpausePipelineMutex.Unlock()
	fake.UnpausePipelineStub = nil
	fake.unpausePipelineReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) UnpausePipelineReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.unpausePipelineMutex.Lock()
	defer fake.unpausePipelineMutex.Unlock()
	fake.UnpausePipelineStub = nil
	if fake.unpausePipelineReturnsOnCall == nil {
		fake.unpausePipelineReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.unpausePipelineReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCommand) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.destroyPipelineMutex.RLock()
	defer fake.destroyPipelineMutex.RUnlock()
	fake.exposePipelineMutex.RLock()
	defer fake.exposePipelineMutex.RUnlock()
	fake.getPipelineMutex.RLock()
	defer fake.getPipelineMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.pipelinesMutex.RLock()
	defer fake.pipelinesMutex.RUnlock()
	fake.setPipelineMutex.RLock()
	defer fake.setPipelineMutex.RUnlock()
	fake.unpausePipelineMutex.RLock()
	defer fake.unpausePipelineMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommand) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fly.Command = new(FakeCommand)
